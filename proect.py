from dotenv import load_dotenv
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.utils.i18n import gettext as _
import sqlite3
import asyncio
from datetime import datetime, timedelta
    from config import DATABASE_PATH

load_dotenv(dotenv_path="BOT_TOKEN.env")
TOKEN = os.getenv("BOT_TOKEN")
if TOKEN is None:
    raise ValueError("‚ùå –¢–û–ö–ï–ù –ù–ï –ù–ê–ô–î–ï–ù")

bot = Bot(token=TOKEN)
dispetcher = Dispatcher(storage=MemoryStorage())

ADMIN_ID = 540311740

connect = sqlite3.connect(DATABASE_PATH, check_same_thread=False)
cursor = connect.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS events (
    id INTEGER PRIMARY KEY,
    name TEXT,
    date TEXT,  -- –§–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM
    description TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS registrations (
    user_id INTEGER,
    event_id INTEGER,
    FOREIGN KEY(event_id) REFERENCES events(id),
    UNIQUE(user_id, event_id)
)
''')
connect.commit()


class SostoyaniyaSobytiy(StatesGroup):
    zhdem_nazvanie = State()
    zhdem_datu = State()
    zhdem_vremya = State()
    zhdem_opisanie = State()
    zhdem_sobytie_dlya_udaleniya = State()
    zhdem_podderzhku = State()

# ====================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ======================

def glavnoe_menu(is_admin: bool):
    knopki = ReplyKeyboardBuilder()
    knopki.button(text="üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è")
    knopki.button(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    if is_admin:
        knopki.button(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    knopki.adjust(1)
    return knopki.as_markup(resize_keyboard=True)


def admin_panel_kb():
    knopki = ReplyKeyboardBuilder()
    knopki.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
    knopki.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
    knopki.button(text="üìã –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π")
    knopki.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    knopki.adjust(1)
    return knopki.as_markup(resize_keyboard=True)


def knopka_otmena():
    knopki = ReplyKeyboardBuilder()
    knopki.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    return knopki.as_markup(resize_keyboard=True)


def dati():
    knopki = ReplyKeyboardBuilder()
    today = datetime.now().date()
    for i in range(7):
        date = today + timedelta(days=i)
        knopki.button(text=date.strftime("%d.%m.%Y"))
    knopki.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    knopki.adjust(3)
    return knopki.as_markup(resize_keyboard=True)


def chasi():
    knopki = ReplyKeyboardBuilder()
    for hour in range(9, 19):
        for minute in ['00', '30']:
            knopki.button(text=f"{hour}:{minute}")
    knopki.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    knopki.adjust(4)
    return knopki.as_markup(resize_keyboard=True)


# ====================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ======================

@dispetcher.message(Command("start"))
async def start(message: types.Message):
    is_admin = message.from_user.id == ADMIN_ID
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∏–∫–∞-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É",
        reply_markup=glavnoe_menu(is_admin)
    )


# ====================== –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–° ======================
@dispetcher.message(lambda message: message.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_start(message: types.Message, state: FSMContext):
    await state.set_state(SostoyaniyaSobytiy.zhdem_podderzhku)
    await message.answer(
        "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —É –≤–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏–µ.\n\n"
        "‚ùå –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=knopka_otmena()
    )

@dispetcher.message(SostoyaniyaSobytiy.zhdem_podderzhku)
async def support(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=glavnoe_menu(message.from_user.id == ADMIN_ID))
        return

    text = message.text
    user = message.from_user

    await bot.send_message(
        chat_id=ADMIN_ID,
        text=(
            "üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
            f"üë§ –û—Ç: <a href='tg://user?id={user.id}'>{user.full_name}</a>\n"
            f"üÜî ID: <code>{user.id}</code>\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{text}"
        ),
        parse_mode="HTML"
    )

    await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.", reply_markup=glavnoe_menu(message.from_user.id == ADMIN_ID))
    await state.clear()

@dispetcher.message(Command("support"))
async def support_command(message: types.Message, state: FSMContext):
    await state.set_state(SostoyaniyaSobytiy.zhdem_podderzhku)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å:",
        reply_markup=knopka_otmena()
    )

@dispetcher.message(lambda message: message.text == "üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è")
async def show_events(message: types.Message):
    try:
        cursor.execute("SELECT * FROM events WHERE date >= datetime('now') ORDER BY date LIMIT 10")
        events = cursor.fetchall()

        if not events:
            await message.answer("–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π.")
            return

        for event in events:
            builder = InlineKeyboardBuilder()
            builder.button(
                text="‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
                callback_data=f"register_{event[0]}"
            )

            if message.from_user.id == ADMIN_ID:
                builder.button(
                    text="‚ùå –£–¥–∞–ª–∏—Ç—å",
                    callback_data=f"delete_{event[0]}"
                )
                builder.adjust(2)

            await message.answer(
                f"<b>{event[1]}</b>\n"
                f"üìÖ {datetime.strptime(event[2], '%Y-%m-%d %H:%M').strftime('%d.%m.%Y –≤ %H:%M')}\n"
                f"‚ÑπÔ∏è {event[3]}",
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@dispetcher.callback_query(lambda c: c.data.startswith('delete_') and c.from_user.id == ADMIN_ID)
async def delete_event_prompt(callback: types.CallbackQuery):
    event_id = callback.data.split('_')[1]

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"final_delete_{event_id}")
    builder.button(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_deletion")
    builder.adjust(2)

    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    await callback.answer("–£–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å?")


# ====================== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ======================

@dispetcher.message(lambda message: message.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and message.from_user.id == ADMIN_ID)
async def admin_panel(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_panel_kb()
    )


@dispetcher.message(lambda message: message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def vozvrat_nazad(message: types.Message):
    is_admin = message.from_user.id == ADMIN_ID
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=glavnoe_menu(is_admin)
    )


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
@dispetcher.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ" and message.from_user.id == ADMIN_ID)
async def dobavlenie_eventa(message: types.Message, state: FSMContext):
    await state.set_state(SostoyaniyaSobytiy.zhdem_nazvanie)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
        reply_markup=knopka_otmena()
    )


@dispetcher.message(SostoyaniyaSobytiy.zhdem_nazvanie)
async def vibor_datbl(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_panel_kb())
        return

    await state.update_data(name=message.text)
    await state.set_state(SostoyaniyaSobytiy.zhdem_datu)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=dati()
    )


@dispetcher.message(SostoyaniyaSobytiy.zhdem_datu)
async def event_date(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_panel_kb())
        return

    try:
        date = datetime.strptime(message.text, "%d.%m.%Y").date()
        await state.update_data(date=date.strftime("%Y-%m-%d"))
        await state.set_state(SostoyaniyaSobytiy.zhdem_vremya)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
            reply_markup=chasi()
        )
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞:")


@dispetcher.message(SostoyaniyaSobytiy.zhdem_vremya)
async def event_time(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_panel_kb())
        return

    try:
        time = datetime.strptime(message.text, "%H:%M").time()
        data = await state.get_data()
        full_date = f"{data['date']} {time.strftime('%H:%M')}"

        await state.update_data(date=full_date)
        await state.set_state(SostoyaniyaSobytiy.zhdem_opisanie)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
            reply_markup=knopka_otmena()
        )
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ —Å–ø–∏—Å–∫–∞:")


@dispetcher.message(SostoyaniyaSobytiy.zhdem_opisanie)
async def event_opisanie(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_panel_kb())
        return

    data = await state.get_data()
    try:
        cursor.execute(
            "INSERT INTO events (name, date, description) VALUES (?, ?, ?)",
            (data['name'], data['date'], message.text)
        )
        connect.commit()
        await message.answer(
            "‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
            reply_markup=admin_panel_kb()
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()


@dispetcher.message(lambda message: message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ" and message.from_user.id == ADMIN_ID)
async def delete_event(message: types.Message, state: FSMContext):
    await state.set_state(SostoyaniyaSobytiy.zhdem_sobytie_dlya_udaleniya)
    await show_events_for_deletion(message)


async def show_events_for_deletion(message: types.Message):
    try:
        cursor.execute("SELECT id, name, date FROM events ORDER BY date")
        events = cursor.fetchall()

        if not events:
            await message.answer("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        builder = InlineKeyboardBuilder()
        for event in events:
            builder.button(
                text=f"{event[1]} ({event[2][:10]})",
                callback_data=f"confirm_delete_{event[0]}"
            )
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_deletion")
        builder.adjust(1)

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@dispetcher.callback_query(lambda c: c.data.startswith('confirm_delete_') and c.from_user.id == ADMIN_ID)
async def confirm_delete(callback: types.CallbackQuery):
    event_id = callback.data.split('_')[2]

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"final_delete_{event_id}")
    builder.button(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_deletion")
    builder.adjust(2)

    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ?",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@dispetcher.callback_query(lambda c: c.data.startswith('final_delete_') and c.from_user.id == ADMIN_ID)
async def final_delete(callback: types.CallbackQuery):
    event_id = callback.data.split('_')[2]

    try:
        # –£–¥–∞–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        cursor.execute("DELETE FROM registrations WHERE event_id = ?", (event_id,))
        # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        cursor.execute("DELETE FROM events WHERE id = ?", (event_id,))
        connect.commit()

        await callback.message.edit_text("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await callback.answer()


@dispetcher.callback_query(lambda c: c.data == "cancel_deletion" and c.from_user.id == ADMIN_ID)
async def cancel_deletion(callback: types.CallbackQuery):
    await callback.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()


@dispetcher.message(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π" and message.from_user.id == ADMIN_ID)
async def show_all_events(message: types.Message):
    try:
        cursor.execute("SELECT * FROM events ORDER BY date")
        events = cursor.fetchall()

        if not events:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
            return

        otvet = "üìã –í—Å–µ —Å–æ–±—ã—Ç–∏—è:\n\n"
        for event in events:
            otvet += (
                f"<b>{event[1]}</b>\n"
                f"ID: {event[0]}\n"
                f"–î–∞—Ç–∞: {datetime.strptime(event[2], '%Y-%m-%d %H:%M').strftime('%d.%m.%Y –≤ %H:%M')}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {event[3]}\n\n"
            )

        await message.answer(otvet, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


# ====================== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–ê –°–û–ë–´–¢–ò–Ø ======================

@dispetcher.callback_query(lambda c: c.data.startswith('register_'))
async def register_for_event(callback: types.CallbackQuery):
    event_id = callback.data.split('_')[1]
    user_id = callback.from_user.id

    try:
        cursor.execute("INSERT INTO registrations VALUES (?, ?)", (user_id, event_id))
        connect.commit()
        await callback.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!")
    except sqlite3.IntegrityError:
        await callback.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ!")
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


# ====================== –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ======================

async def check_events():
    while True:
        try:
            cursor.execute('''
            SELECT * FROM events 
            WHERE datetime(date) BETWEEN datetime('now', '+59 minutes') AND datetime('now', '+60 minutes')
            ''')
            events = cursor.fetchall()

            for event in events:
                cursor.execute("SELECT user_id FROM registrations WHERE event_id = ?", (event[0],))
                users = cursor.fetchall()
                for user in users:
                    try:
                        await bot.send_message(
                            user[0],
                            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ <b>{event[1]}</b> "
                            f"–Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å ({datetime.strptime(event[2], '%Y-%m-%d %H:%M').strftime('%d.%m.%Y –≤ %H:%M')})!",
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π: {str(e)}")

        await asyncio.sleep(60)


# ====================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ======================

async def on_startup():
    asyncio.create_task(check_events())


# async def main():
#     await on_startup()
#     await dispetcher.start_polling(bot)

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    asyncio.create_task(check_events())
    await dispetcher.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())